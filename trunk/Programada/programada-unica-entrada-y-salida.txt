[PORT]:	(MSB)...MOTOR,LUZ_ROJA,LUZ_AMARILLA,RESET,HAY_AGUA,N_MAX,N_MIN (LSB)
[ENTRADA]:	(MSB)...RESET,HAY_AGUA,N_MAX,N_MIN (LSB)
[SALIDA]:	(MSB)...MOTOR,LUZ_ROJA,LUZ_AMARILLA (LSB)

					.begin
					.org 2048

LECTURA:			ld		[PORT],%r1		! Guardo en %r1 lo que leo del puerto.
					andcc	%r1,1,%r2		! %r2 <- (%r1 AND 1), enmascaro el bit del nivel mínimo. Si da 1, es porque el agua se encuentra por debajo del nivel mínimo.
					be		COMPARO_N_MAX	! Si el agua no está por debajo del nivel mínimo, comparo el nivel máximo
					ba		N_MIN			! sino, apago el motor

COMPARO_N_MAX:		andcc	%r1,2,%r2		! Enmascaro el bit del nivel máximo. Si da 1, es porque se superó el nivel máximo.
					bne		APAGO_MOTOR		! Se superó el nivel máximo, entonces apago el motor
					ba		LECTURA			! Si no se superó, vuelvo a leer esperando cambios.

N_MIN:				andcc	%r1,4,%r2		! Enmascaro el bit de HAY_AGUA. Si da 1, es porque no se pasó el límite inferior del agua en el reservorio
					be		PRENDO_LUZ_ROJA	! Si no hay agua, prendo la luz roja. Si se alcanzó el nivel mínimo, el motor estaba apagado, por eso no lo apago.
					ba		PRENDO_MOTOR	! Si hay agua, y se alcanzó el nivel mínimo, prendo el motor

PRENDO_MOTOR:		andcc	%r1,64,%r2		! Enmascaro el bit de MOTOR, para ver en qué estado está
					be		PRENDO_MOTOR_2	! Si estaba apagado, lo prendo.
					ba		LECTURA			! Si ya estaba prendido (en 1), lo dejo y vuelvo a leer, para ver si se activa algún sensor.

PRENDO_MOTOR_2:		add		%r1,64,%r3		! Sabiendo que el motor está apagado, lo prendo poniéndolo en uno.
					st		%r3,[PORT]		! Y luego lo mando por el puerto
					ba		LECTURA

APAGO_MOTOR:		andcc	%r1,64,%r2		! Enmascaro el bit de MOTOR, para ver en qué estado está
					bne		APAGO_MOTOR_2	! Si estaba prendido, lo apago.
					ba		LECTURA			! Si ya estaba prendido (en 1), lo dejo y vuelvo a leer, para ver si se activa algún sensor.

APAGO_MOTOR_2:		sub		%r1,64,%r3		! Sabiendo que el motor está prendido, lo apago poniendo en cero el bit correspondiente.
					st		%r3,[PORT]		! Y luego lo mando por el puerto
					ba		LECTURA

PRENDO_LUZ_ROJA:		andcc	%r1,32,%r2		! Enmascaro el bit de la luz roja, para ver en qué estado está
					be		PRENDO_LUZ_ROJA_2	! Si estaba apagada, la prendo.
					ba		LECTURA			! Si ya estaba prendido (en 1), lo dejo y vuelvo a leer, para ver si se activa algún sensor.

PRENDO_LUZ_ROJA_2:	add		%r1,32,%r3		! Sabiendo que la luz está apagada, la prendo.
					st		%r3,[PORT]		! Y luego lo mando por el puerto
					ba		LECTURA

ENTRADA:				0x05000000
SALIDA:					0x06000000			

					.end
