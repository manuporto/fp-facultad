(defun eval (exp amb)
	(if (null exp) nil
		(if (atom exp)
			(if (numberp exp) exp
				(buscar exp amb)
			)
			(cond
				( (eq (car exp) 'quote) (cadr exp))
				( (eq (car exp) 'and)
					(if (eval (nth 1 exp) amb)
						(eval (nth 2 exp) amb)
						nil 
					)
				)
				( (eq (car exp) 'or)
					(if (eval (nth 1 exp) amb)
						T
						(eval (nth 2 exp) amb)
					)
				)
				( (eq (car exp) 'if)
					(if (eval (nth 1 exp) amb)
						(eval (nth 2 exp) amb)
						(eval (nth 3 exp) amb)
					)
				)
				( (eq (car exp) 'cond)
					(if (eval (car (nth 1 exp)) amb)
						(eval (cadr (nth 1 exp)) amb)
						(eval (cons 'cond (cddr exp)) amb)
					)
				)
				( (eq (car exp) 'lambda ) exp )
				( T (aplicar
						(eval (car exp) amb)
						(mapcar '(lambda (x) (eval x amb)) (cdr exp))
						amb
					)
				)
			)
		)
	)
)

(defun aplicar (fn lae amb)
	(if (atom fn)
		(cond	( (eq fn 'car) (caar(nth 0 lae)) )
				( (eq fn 'cdr) (cdr (nth 0 lae)) )
				( (eq fn 'list) lae )
				( (eq fn 'cons) (cons (car lae) (cadr lae)) )
				( (eq fn '>) (if (>(nth 0 lae)(nth 1 lae)) T nil ) )
				( (eq fn '<) (if (<(nth 0 lae)(nth 1 lae)) T nil ) )
				( (eq fn '=) (if (=(nth 0 lae)(nth 1 lae)) T nil ) )
				( (eq fn '+) (+(nth 0 lae)(nth 1 lae)) )
				( (eq fn '-) (-(nth 0 lae)(nth 1 lae)) )
				( (eq fn '*) (*(nth 0 lae)(nth 1 lae)) )
				( (eq fn '/) (/(nth 0 lae)(nth 1 lae)) )
		)
	(eval (nth 2 fn) (extenderamb (nth 1 fn) lae amb) )
	)
)

(defun extenderamb (lp la amb)
	(if (null lp) amb
		(append (list (car lp) (car la)) (extenderamb (cdr lp) (cdr la) amb))
	)
)

(defun buscar (nombre amb)
	(if (eq (car amb) nombre)
		(cadr amb)
		(buscar nombre (cddr amb))
	)
)
