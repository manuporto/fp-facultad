Object subclass: #AdministradorDePiezas	instanceVariableNames: 'alfilBlanco alfilNegro caballoBlanco caballoNegro torreBlanca torreNegra blanco negro'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:49'!crearAlfilBlanco	| pieza |	(alfilBlanco = nil) ifFalse: [PiezaUsada new signal.].	pieza := Alfil new.	pieza crear: blanco.	alfilBlanco := pieza.	^alfilBlanco.! !!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:50'!crearAlfilNegro	| pieza |	(alfilNegro = nil ) ifFalse: [PiezaUsada new signal.].	pieza := Alfil new.	pieza crear: negro.	alfilNegro := pieza.	^alfilNegro.! !!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:50'!crearCaballoBlanco	| pieza |	(caballoBlanco = nil) ifFalse: [PiezaUsada new signal.].	pieza := Caballo new.	pieza crear: blanco.	caballoBlanco := pieza.	^caballoBlanco.! !!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:50'!crearCaballoNegro	| pieza |	(caballoNegro = nil) ifFalse: [PiezaUsada new signal.].	pieza := Caballo new.	pieza crear: negro.	caballoNegro := pieza.	^caballoNegro.! !!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:51'!crearTorreBlanca	| pieza |	(torreBlanca = nil) ifFalse: [PiezaUsada new signal.].	pieza := Torre new.	pieza crear: blanco.	torreBlanca := pieza.	^torreBlanca.! !!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:51'!crearTorreNegra	| pieza |	(torreNegra = nil) ifFalse: [PiezaUsada new signal.].	pieza := Torre new.	pieza crear: negro.	torreNegra := pieza.	^torreNegra.! !!AdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:48'!initialize	alfilBlanco := nil.	alfilNegro := nil.	caballoBlanco := nil.	caballoNegro := nil.	torreBlanca := nil.	torreNegra := nil.	blanco := Blanco new.	negro := Negro new.! !Object subclass: #ColorDePieza	instanceVariableNames: 'color'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!ColorDePieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 18:32'!esDelColorDe: colorAComparar	"Devuelve verdadero si color es del mismo color que la clase."	^((colorAComparar getColor) = (self getColor)).! !!ColorDePieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 14:50'!getColor	^color.! !ColorDePieza subclass: #Blanco	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Blanco methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 14:48'!initialize	color:= 'blanco'.! !Error subclass: #ColorIncorrecto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Object subclass: #Juego	instanceVariableNames: 'tablero tamanioTablero piezasColocadas ultimoColor administrador'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 17:51'!actualizarPosicionDe: pieza de: posicionVieja a: posicionNueva	"Busca la pieza y actualiza su posición"		| posPieza posPiezaAux posicionAEliminar |		posPieza := PosicionPieza new.	posPieza setPieza: pieza.	posPieza setPosicion: posicionNueva.		1 to: (piezasColocadas size) do: [:i |		posPiezaAux := piezasColocadas at: i.		((posPiezaAux getPosicion) = posicionVieja) ifTrue: [			posicionAEliminar := i.		].	].	piezasColocadas removeAt: posicionAEliminar.	piezasColocadas add: posPieza.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 18:06'!earAlfilBlanco	^administrador crearAlfilBlanco.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 18:06'!rAlfilNegro	^administrador crearAlfilNegro.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 18:05'!crearCaballoBlanco	^administrador crearCaballoBlanco.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 18:05'!rearCaballoNegro	^administrador crearCaballoNegro.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 18:06'!TorreBlanca	^administrador crearTorreBlanca.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 18:06'!orreNegra	^administrador crearTorreNegra.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 17:44'!noPuedeMover:colorDelJugador	"Función auxiliar que devuelve true si el jugador actual no puede mover ninguna de sus tres piezas"		"Recorre todas las piezas colocadas, y por cada una del jugador correspondiente, prueba si pueden moverse"	1 to: piezasColocadas size do: [:i |		( ((piezasColocadas at: i) getPieza getColor) esDelColorDe: colorDelJugador ) ifTrue: [			(self noPuedeMoverAux: ((piezasColocadas at: i) getPosicion)) ifFalse: [^false]		].	].^true.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 16:42'!noPuedeMoverAux:posicion	"Función auxiliar que devuelve true si la ficha de la posición 'posicion' no puede moverse en todo el tablero'"		| pieza noPuedeMover |		noPuedeMover := true.		pieza := tablero obtenerDe: posicion.	1 to: tamanioTablero do: [:i |		1 to: tamanioTablero do: [:j |			((i = posicion x) and: [(j = posicion y)]) ifFalse: [ "Si no es la misma posición original, veo si me puedo mover"				(pieza posibilidadDeMover: posicion a:i@j) ifTrue: [					((tablero obtenerDe: i@j) = nil) ifTrue: [noPuedeMover := false]				].			].		].	].		^noPuedeMover.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 17:05'!partidaTerminadaColumnas	| hayNulos sonIguales |	sonIguales := false.	1 to: tamanioTablero do: [: i |		hayNulos := false.		1 to: tamanioTablero do: [: j |			((tablero obtenerDe: j@i) = nil) ifTrue: [hayNulos := true.].		].		(hayNulos) ifFalse: [			sonIguales := true.			1 to: (tamanioTablero - 1) do: [: k |				( ((tablero obtenerDe: k@i) getColor) = ((tablero obtenerDe:(k+1)@i) getColor) ) ifFalse:[					sonIguales := false.									].			].		].		(sonIguales) ifTrue: [^true].	].	^sonIguales.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 17:05'!partidaTerminadaDiagonalPrincipal	| hayNulos sonIguales |	sonIguales := false.	hayNulos := false.	1 to: tamanioTablero do: [: i |		((tablero obtenerDe: i@i) = nil) ifTrue: [hayNulos := true.].	].		(hayNulos) ifFalse: [		sonIguales := true.		1 to: (tamanioTablero - 1) do: [: i |			( ((tablero obtenerDe: i@i) getColor) = ((tablero obtenerDe: (i + 1)@(i + 1)) getColor) ) ifFalse:[				sonIguales := false.			].		].		(sonIguales) ifTrue: [^true].	].	^sonIguales.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 17:05'!partidaTerminadaDiagonalSecundaria	| hayNulos sonIguales |	sonIguales := false.	hayNulos := false.	1 to: tamanioTablero do: [: i |		((tablero obtenerDe: i@(tamanioTablero + 1 - i)) = nil) ifTrue: [hayNulos := true.].	].	(hayNulos) ifFalse: [		sonIguales := true.		1 to: (tamanioTablero - 1) do: [: i |			( ((tablero obtenerDe: i@(tamanioTablero + 1 - i)) getColor) = ((tablero obtenerDe:(i + 1)@(tamanioTablero - i)) getColor) ) ifFalse: [				sonIguales := false.			].		].		(sonIguales) ifTrue: [^true].	].	^sonIguales.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/7/2010 17:04'!partidaTerminadaFilas	| hayNulos sonIguales |	sonIguales := false.	1 to: tamanioTablero do: [: i |		hayNulos := false.		1 to: tamanioTablero do: [: j |			((tablero obtenerDe: i@j) = nil) ifTrue: [hayNulos := true.].		].		(hayNulos) ifFalse: [			sonIguales := true.			1 to: (tamanioTablero - 1) do: [:k |				( ((tablero obtenerDe: i@k) getColor) = ((tablero obtenerDe:i@(k + 1)) getColor) ) ifFalse:[					sonIguales := false.					].			].		].		(sonIguales) ifTrue: [^true].	].	^sonIguales.! !!Juego methodsFor: 'auxiliares' stamp: 'MarianoRibotta 10/12/2010 19:27'!e do: [:i | 		((piezasColocadas at:i) getPieza == pieza) ifTrue: [^true].	].	^false.! !!Juego methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 19:30'!del jugador en la posición correspondiente y, si se pudo, guarda la ficha con su posición"	| posPieza |	(ultimoColor esDelColorDe: (pieza getColor) ) ifTrue: [TurnoNoCorrespondiente new signal	].	((tablero obtenerDe: posicion) = nil ) ifFalse: [MovimientoNoValido new signal.].	(self piezaUsada: pieza) ifTrue: [PiezaUsada new signal.].	tablero colocar: pieza en: posicion.	ultimoColor := pieza getColor.	posPieza := PosicionPieza new.	posPieza setPieza: pieza.	posPieza setPosicion: posicion.	piezasColocadas add: posPieza.! !!Juego methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:19'!| negro |	administrador := AdministradorDePiezas new.	piezasColocadas := OrderedCollection new.	tablero := Tablero new.	tamanioTablero := 3.	tablero crear: tamanioTablero.	negro := Negro new.	ultimoColor := negro.! !!Juego methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 17:37'!mover: desde a: hasta de: colorDelJugador	| pieza posPieza |	((piezasColocadas size) = (2 * tamanioTablero)) ifFalse: [MovimientoNoValido new signal.].	(ultimoColor esDelColorDe: colorDelJugador ) ifTrue: [TurnoNoCorrespondiente new signal.].	(self noPuedeMover:colorDelJugador ) ifTrue: [		ultimoColor := colorDelJugador.		NoHayMovimientosPosibles new signal.	].	pieza := tablero obtenerDe: desde.		(pieza = nil) ifTrue: [MovimientoNoValido new signal.].	(pieza getColor esDelColorDe: colorDelJugador) ifFalse: [PiezaNoValida new signal.].	(pieza posibilidadDeMover: desde a: hasta)		ifFalse: [MovimientoNoValido new signal.]		ifTrue: [			tablero moverDe: desde a: hasta.			ultimoColor := colorDelJugador.			self actualizarPosicionDe: pieza de: desde a: hasta.		].! !!Juego methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 17:07'!partidaTerminada	^(self partidaTerminadaColumnas or: [		self partidaTerminadaFilas or: [			self partidaTerminadaDiagonalPrincipal or: [				self partidaTerminadaDiagonalSecundaria.			]		]	]).! !Object subclass: #Jugador	instanceVariableNames: 'color'	classVariableNames: 'juego'	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Jugador methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 15:37'!colocar: pieza en: punto	"Corrobora que sea una pieza de su mismo color, y la coloca en el tablero"	((pieza getColor) esDelColorDe: color ) ifFalse: [ColorIncorrecto new signal.].	juego colocar: pieza en: punto.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:04'!crear: juegoAux	juego := juegoAux.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 15:38'!mover: desde a: hasta	"Mueve la pieza en la posición 'desde' a la posición 'hasta'"		juego mover: desde a: hasta de: color. ! !Jugador subclass: #JugadorBlanco	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!JugadorBlanco methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:06'!lfil	^(juego crearAlfilBlanco).! !!JugadorBlanco methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:05'!crearCaballo 	^(juego crearCaballoBlanco).! !!JugadorBlanco methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:06'!orre	^(juego crearTorreBlanca).! !!JugadorBlanco methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 14:31'!initialize 	| blanco |		blanco := Blanco new.		color:= blanco.! !Jugador subclass: #JugadorNegro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!JugadorNegro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:07'!lfil	^(juego crearAlfilNegro).! !!JugadorNegro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:07'!aballo	^(juego crearCaballoNegro).! !!JugadorNegro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:07'!orre	^(juego crearTorreNegra).! !!JugadorNegro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 18:01'!initialize 	| negro |		negro := Negro new.		color:= negro.! !Error subclass: #MovimientoNoValido	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!ColorDePieza subclass: #Negro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Negro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 14:48'!initialize	color:= 'negro'.! !Error subclass: #NoHayMovimientosPosibles	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Object subclass: #Pieza	instanceVariableNames: 'color'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Pieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 16:36'!crear:colorDeLaPieza.	color:= colorDeLaPieza.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 16:44'!getColor	^color.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 16:45'!initialize	color:= nil.! !Pieza subclass: #Alfil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Alfil methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 17:54'!posibilidadDeMover: p1 a: p2	"Devuelve si es posible mover el alfil de la posición P1 a la posición P2"		(	( ((p1 x) + (p1 y)) = ((p2 x) + (p2 y)) ) or: [	( ((p1 x) - (p1 y)) = ((p2 x) - (p2 y)) ) ]	) ifFalse: [^false].		^true.! !Pieza subclass: #Caballo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Caballo methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 18:44'!posibilidadDeMover: p1 a: p2	"Devuelve si es posible mover el alfil de la posición P1 a la posición P2"	(((((p1 x - p2 x) abs) = 1) and: [(((p1 y - p2 y) abs) = 2)]) or: [		((((p1 x - p2 x) abs) = 2) and: [(((p1 y - p2 y) abs) = 1)])		]) ifTrue: [^true.]	ifFalse: [^false.] ! !Error subclass: #PiezaNoValida	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Error subclass: #PiezaUsada	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Object subclass: #PosicionPieza	instanceVariableNames: 'pieza posicion'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!PosicionPieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 16:29'!getPieza	^pieza.! !!PosicionPieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 16:29'!getPosicion	^posicion! !!PosicionPieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 17:33'!initialize	posicion := nil.	pieza := nil.! !!PosicionPieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 15:44'!setPieza: piezaAux.	pieza := piezaAux.! !!PosicionPieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 15:43'!setPosicion: pos.	posicion := pos.! !Object subclass: #Tablero	instanceVariableNames: 'tablero tamanioTablero'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 16:59'!colocar: pieza en: punto	( (punto x > tamanioTablero) or: [punto y > tamanioTablero] ) ifTrue: [MovimientoNoValido new signal.].		tablero at: punto put: pieza.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 17:08'!crear: tamanio	tamanioTablero := tamanio.	tablero := Dictionary new.		1 to: tamanio do: [:x |		1 to: tamanio do: [:y | 			tablero at: x@y put: nil.		]	].! !!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 19:15'!moverDe: desde a: hasta	"Mueve la pieza en la posición 'desde' a la posición 'hasta'"		(		(desde x > tamanioTablero) or: [		(desde y > tamanioTablero) or: [		(hasta x > tamanioTablero) or: [		(hasta y > tamanioTablero) ]]]	) ifTrue: [MovimientoNoValido new signal.].	tablero at:hasta put: (tablero at: desde).	tablero at:desde put: nil.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 16:38'!obtenerDe: posicion.	^(tablero at:posicion).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tablero class	instanceVariableNames: 'nitiali'!Pieza subclass: #Torre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Torre methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 17:53'!posibilidadDeMover: p1 a: p2	"Devuelve si es posible mover el alfil de la posición P1 a la posición P2"		(((p1 x) = (p2 x)) or: [((p1 y) = (p2 y))]) ifTrue: [^true]	ifFalse: [ ^false ]! !Error subclass: #TurnoNoCorrespondiente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!