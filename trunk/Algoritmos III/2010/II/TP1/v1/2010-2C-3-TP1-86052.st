Object subclass: #ColorAux	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!ColorAux subclass: #Blanco	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Error subclass: #ColorIncorrecto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Object subclass: #Jugador	instanceVariableNames: 'color'	classVariableNames: 'tablero'	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Jugador methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/24/2010 15:35'!colocar: pieza en: punto	"Corrobora que sea una pieza de su mismo color, y la coloca en el tablero"	((pieza getColor) = color ) ifFalse: [ColorIncorrecto new signal.].	tablero colocar: pieza en: punto.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/24/2010 16:08'!crear: tab	"Inicializa al jugador, dándole una copia del tablero"	tablero := tab.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/24/2010 15:44'!mover: desde a: hasta	"Mueve la pieza en la posición 'desde' a la posición 'hasta'"		tablero mover: desde a: hasta de: color. ! !Jugador subclass: #JugadorBlanco	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!JugadorBlanco methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/28/2010 15:58'!initialize 		color:= Blanco.! !Jugador subclass: #JugadorNegro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!JugadorNegro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/28/2010 15:58'!initialize 		color:= Negro.! !Error subclass: #MovimientoNoValido	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!ColorAux subclass: #Negro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Error subclass: #NoHayMovimientosPosibles	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Object subclass: #Pieza	instanceVariableNames: 'color'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Pieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/24/2010 16:37'!crear:colorDeLaPieza.	color:= colorDeLaPieza class.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 16:44'!getColor	^color.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 17:25'!getTipo		^(self class)! !Pieza subclass: #Alfil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Alfil methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 17:54'!posibilidadDeMover: p1 a: p2	"Devuelve si es posible mover el alfil de la posición P1 a la posición P2"		(	( ((p1 x) + (p1 y)) = ((p2 x) + (p2 y)) ) or: [	( ((p1 x) - (p1 y)) = ((p2 x) - (p2 y)) ) ]	) ifFalse: [^false].		^true.! !Pieza subclass: #Caballo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Caballo methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 18:44'!posibilidadDeMover: p1 a: p2	"Devuelve si es posible mover el alfil de la posición P1 a la posición P2"	(((((p1 x - p2 x) abs) = 1) and: [(((p1 y - p2 y) abs) = 2)]) or: [		((((p1 x - p2 x) abs) = 2) and: [(((p1 y - p2 y) abs) = 1)])		]) ifTrue: [^true.]	ifFalse: [^false.] ! !Error subclass: #PiezaNoValida	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Error subclass: #PiezaUsada	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!Object subclass: #Tablero	instanceVariableNames: 'tablero ultimoColor piezasColocadas caballoBlancoColocado torreBlancaColocada alfilBlancoColocado caballoNegroColocado torreNegraColocada alfilNegroColocado tamanioTablero posicionCaballoBlanco posicionAlfilBlanco posicionTorreBlanca posicionCaballoNegro posicionAlfilNegro posicionTorreNegra'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/25/2010 18:15'!colocar: pieza en: punto	(ultimoColor = pieza getColor ) ifTrue: [TurnoNoCorrespondiente new signal.].		( (punto x > tamanioTablero) or: [punto y > tamanioTablero] ) ifTrue: [MovimientoNoValido new signal.].	((tablero at: punto) = nil ) ifTrue: [		((pieza getTipo) = Caballo) ifTrue: [		"Es caballo"			(pieza getColor = Blanco) ifTrue: [				"Es caballo blanco"				(caballoBlancoColocado = true) ifTrue: [PiezaUsada new signal.]				ifFalse: [ 					posicionCaballoBlanco := punto.					caballoBlancoColocado := true.				]			]			ifFalse: [				"Es caballo negro"				(caballoNegroColocado = true) ifTrue: [PiezaUsada new signal.]				ifFalse: [ 					posicionCaballoNegro := punto.					caballoNegroColocado := true.				]			].		].		((pieza getTipo) = Alfil) ifTrue: [		"Es Alfil"			(pieza getColor = Blanco) ifTrue: [				"Es Alfil blanco"				(alfilBlancoColocado = true) ifTrue: [PiezaUsada new signal.]				ifFalse: [					posicionAlfilBlanco := punto.					alfilBlancoColocado := true.				]			]			ifFalse: [				"Es Alfil negro"				(alfilNegroColocado = true) ifTrue: [PiezaUsada new signal.]				ifFalse: [					posicionAlfilNegro := punto.					alfilNegroColocado := true.				]			].		].		((pieza getTipo) = Torre) ifTrue: [		"Es Torre"			(pieza getColor = Blanco) ifTrue: [				"Es Torre blanca"				(torreBlancaColocada = true) ifTrue: [PiezaUsada new signal.]				ifFalse: [					posicionTorreBlanca := punto.					torreBlancaColocada := true.				]			]			ifFalse: [				"Es Torre negra"				(torreNegraColocada = true) ifTrue: [PiezaUsada new signal.]				ifFalse: [					posicionTorreNegra := punto.					torreNegraColocada := true.				]			].		].		tablero at: punto put: pieza.		piezasColocadas := piezasColocadas + 1.		ultimoColor := pieza getColor.	]	ifFalse: [MovimientoNoValido new signal.].	! !!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/24/2010 17:36'!crear: tamanio.		tablero := Dictionary new.		1 to: 3 do: [:x |		1 to: 3 do: [:y | 			tablero at: x@y put: nil.		]	].	tamanioTablero := tamanio.	piezasColocadas := 0.	caballoBlancoColocado := false.	caballoNegroColocado := false.	alfilBlancoColocado := false.	alfilNegroColocado := false.	torreBlancaColocada := false.	torreNegraColocada := false.	ultimoColor := Negro. "Por defecto, así permite que el siguiente sea el blanco"! !!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/25/2010 18:25'!mover: desde a: hasta de: colorDelJugador	"Mueve la pieza en la posición 'desde' a la posición 'hasta'"		| pieza |		(piezasColocadas = (2 * tamanioTablero)) ifFalse: [MovimientoNoValido new signal.].	(ultimoColor = colorDelJugador ) ifTrue: [TurnoNoCorrespondiente new signal.].	(		(desde x > tamanioTablero) or: [		(desde y > tamanioTablero) or: [		(hasta x > tamanioTablero) or: [		(hasta y > tamanioTablero) ]]]	) ifTrue: [MovimientoNoValido new signal.].	(self noPuedeMover:colorDelJugador ) ifTrue: [		ultimoColor := colorDelJugador.		NoHayMovimientosPosibles new signal.	].	pieza := tablero at: desde.		(pieza = nil) ifTrue: [MovimientoNoValido new signal.].	(pieza getColor = colorDelJugador) ifFalse: [PiezaNoValida new signal.].	(pieza posibilidadDeMover: desde a: hasta) ifTrue: [		tablero at:hasta put: pieza.		tablero at:desde put: nil.		ultimoColor := colorDelJugador.		self definirPosicion: hasta de: pieza."		ultimoColor := pieza getColor."	] ifFalse: [MovimientoNoValido new signal.]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/28/2010 15:05'!partidaTerminada	| hayNulos sonIguales |	"Chequeo filas"		sonIguales := false.	1 to: tamanioTablero do: [: i |		hayNulos := false.		1 to: tamanioTablero do: [: j |			((tablero at: i@j) = nil) ifTrue: [hayNulos := true.].		].		(hayNulos) ifFalse: [			sonIguales := true.			1 to: (tamanioTablero - 1) do: [:k |				( ((tablero at: i@k) getColor) = ((tablero at:i@(k + 1)) getColor) ) ifFalse:[					sonIguales := false.					].			].		].		(sonIguales) ifTrue: [^true].	].	"Chequeo columnas"	sonIguales := false.	1 to: tamanioTablero do: [: i |		hayNulos := false.		1 to: tamanioTablero do: [: j |			((tablero at: j@i) = nil) ifTrue: [hayNulos := true.].		].		(hayNulos) ifFalse: [			sonIguales := true.			1 to: (tamanioTablero - 1) do: [: k |				( ((tablero at: k@i) getColor) = ((tablero at:(k+1)@i) getColor) ) ifFalse:[					sonIguales := false.									].			].		].		(sonIguales) ifTrue: [^true].	].	"Chequeo diagonales"		"Diagonal principal"	sonIguales := false.	hayNulos := false.	1 to: tamanioTablero do: [: i |		((tablero at: i@i) = nil) ifTrue: [hayNulos := true.].	].		(hayNulos) ifFalse: [		sonIguales := true.		1 to: (tamanioTablero - 1) do: [: i |			( ((tablero at: i@i) getColor) = ((tablero at:(i + 1)@(i + 1)) getColor) ) ifFalse:[				sonIguales := false.			].		].		(sonIguales) ifTrue: [^true].	].	"Diagonal secundaria"	sonIguales := false.	hayNulos := false.	1 to: tamanioTablero do: [: i |		((tablero at: i@(tamanioTablero + 1 - i)) = nil) ifTrue: [hayNulos := true.].	].	(hayNulos) ifFalse: [		sonIguales := true.		1 to: (tamanioTablero - 1) do: [: i |			( ((tablero at: i@(tamanioTablero + 1 - i)) getColor) = ((tablero at:(i + 1)@(tamanioTablero - i)) getColor) ) ifFalse: [				sonIguales := false.			].		].		(sonIguales) ifTrue: [^true].	].	^sonIguales.! !!Tablero methodsFor: 'auxiliares' stamp: 'MarianoRibotta 9/25/2010 18:27'!definirPosicion: punto de: pieza.	"Define qué pieza es, y guarda su posición (punto) en el tablero"		(pieza getColor = Blanco) ifTrue: [		((pieza getTipo) = Caballo) ifTrue: [			posicionCaballoBlanco := punto.		].		((pieza getTipo) = Alfil) ifTrue: [			posicionAlfilBlanco := punto.		].		((pieza getTipo) = Torre) ifTrue: [			posicionTorreBlanca := punto.		].	] ifFalse: [		((pieza getTipo) = Caballo) ifTrue: [			posicionCaballoNegro := punto.		].		((pieza getTipo) = Alfil) ifTrue: [			posicionAlfilNegro := punto.		].		((pieza getTipo) = Torre) ifTrue: [			posicionTorreNegra := punto.		].	].! !!Tablero methodsFor: 'auxiliares' stamp: 'MarianoRibotta 9/25/2010 19:11'!noPuedeMover:colorDelJugador	"Función auxiliar que devuelve true si el jugador actual no puede mover ninguna de sus tres piezas"		| posicion |		(colorDelJugador = Blanco) ifTrue: [		posicion := posicionAlfilBlanco.		(self noPuedeMoverAux: posicion) ifFalse: [^false.].		posicion := posicionCaballoBlanco.		(self noPuedeMoverAux: posicion) ifFalse: [^false.].		posicion := posicionTorreBlanca.		(self noPuedeMoverAux: posicion) ifFalse: [^false.].			] ifFalse: [		posicion := posicionAlfilNegro.		(self noPuedeMoverAux: posicion) ifFalse: [^false.].		posicion := posicionCaballoNegro.		(self noPuedeMoverAux: posicion) ifFalse: [^false.].		posicion := posicionTorreNegra.		(self noPuedeMoverAux: posicion) ifFalse: [^false.].	].	^true.! !!Tablero methodsFor: 'auxiliares' stamp: 'MarianoRibotta 9/25/2010 18:58'!noPuedeMoverAux:posicion	"Función auxiliar que devuelve true si el jugador actual no puede mover ninguna de sus tres piezas"		| pieza noPuedeMover |		noPuedeMover := true.			pieza := tablero at: posicion.		1 to: tamanioTablero do: [:i |			1 to: tamanioTablero do: [:j |				(pieza posibilidadDeMover: posicion a:i@j) ifTrue: [					((i = posicion x) and: [(j = posicion y)]) ifFalse: [						((tablero at: i@j) = nil) ifTrue: [noPuedeMover := false]					].				].			].		].		^noPuedeMover.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tablero class	instanceVariableNames: 'nitiali'!Pieza subclass: #Torre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!!Torre methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/22/2010 17:53'!posibilidadDeMover: p1 a: p2	"Devuelve si es posible mover el alfil de la posición P1 a la posición P2"		(((p1 x) = (p2 x)) or: [((p1 y) = (p2 y))]) ifTrue: [^true]	ifFalse: [ ^false ]! !Error subclass: #TurnoNoCorrespondiente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052'!