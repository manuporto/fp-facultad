Error subclass: #ArgumentoError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!Object subclass: #Funcion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Funcion methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/21/2010 02:06'!evaluarEntre: desde y: hasta conPrecision:h	"Evalúa en el intervalo pasado"		| lista i|	(hasta <= desde) ifTrue: [RangoError new signal.].		(h<=0) ifTrue: [PrecisionError new signal.].	lista := OrderedCollection new.	i := desde.	[i<=hasta] whileTrue: [		lista add: (self evaluarEn:i).		i := i+h.	].		^lista.! !Funcion subclass: #FuncionContinua	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!FuncionContinua methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 00:52'!derivarEn: x	"Deriva la función en el valor pasado"	| h |		h := 0.00001.	^(((self evaluarEn:(x+h)) - (self evaluarEn: x)) / h).! !!FuncionContinua methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 00:53'!integrarEntre: a y: b	"Evalúa la integral entre los valores pasados"	| termino1 termino2 termino3 termino4 |	"Regla de Simpson: (b-a)/6* [f(a)+4*f((a+b)/2)+f(b)]"		termino1 := ((b-a)/6).	termino2 := (self evaluarEn:a).	termino3 := 4*(self evaluarEn:((a+b)/2)).	termino4 := (self evaluarEn:b)."	^(((b-a)/6)*((parametro evaluarEn:a)+4*(parametro evaluarEn:((a+b)/2))+(parametro evaluarEn:b)))."	^(termino1 * (termino2 + termino3 + termino4)).! !!FuncionContinua methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 00:53'!interseccionEntre: a y: b con: f	"Evalúa la intersección de la función, con otra"		| h interseccion i aux1 aux2 |	(a>b) ifTrue: [RangoError new signal.].	interseccion := OrderedCollection new.	h := 0.00001.	i := a.	[i<=b] whileTrue: [			aux1 := self evaluarEn: i.		aux2 := f evaluarEn: i.				((aux1-aux2) closeTo: 0) ifTrue: [			((interseccion size) = 0) ifTrue: [interseccion add:i.]			ifFalse: [				(i closeTo: (interseccion last )) ifFalse: [interseccion add:i.].			]		].		i := i+h.	].	^interseccion.! !!FuncionContinua methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 01:15'!maximoEntre: a y: b	"Busca el valor máximo de la función entre los valores a y b"	| h maximo i aux resultado |	(a>b) ifTrue: [RangoError new signal.].	maximo := self evaluarEn:a.	resultado := a.	h := 0.00001.	i := a+h.	[i<=b] whileTrue: [			aux := self evaluarEn: i.		(aux > maximo) ifTrue: [maximo := aux. resultado := i.].		i := i+h.	].	^resultado.! !!FuncionContinua methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 00:56'!minimoEntre: a y: b	"Busca el mínimo de la función entre los valores a y b"	| h minimo i aux resultado |	(a>b) ifTrue: [RangoError new signal.].	minimo := self evaluarEn:a.	resultado := a.	h := 0.00001.	i := a+h.	[i<=b] whileTrue: [			aux := self evaluarEn: i.		(aux < minimo) ifTrue: [minimo := aux. resultado := i.].		i := i+h.	].	^resultado.! !FuncionContinua subclass: #Constante	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Constante methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/20/2010 00:41'!evaluarEn:x	"Evalúa la función en el valor pasado" ^valor.! !!Constante methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/20/2010 00:16'!valor:x	"Ingresa el valor de la constante"	valor := x.! !FuncionContinua subclass: #FuncionDeDosParametros	instanceVariableNames: 'parametro1 parametro2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!FuncionDeDosParametros methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/21/2010 03:27'!parametro1: a parametro2: b	"Guarda en el objeto, los valores pasados"	parametro1 := a.	parametro2 := b.! !FuncionDeDosParametros subclass: #Division	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Division methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/21/2010 02:02'!evaluarEn: x	"Evalúa la función en el valor pasado"	((parametro2 evaluarEn:x) =0) ifTrue: [ArgumentoError new signal].	^((parametro1 evaluarEn:x) / (parametro2 evaluarEn:x)).! !FuncionDeDosParametros subclass: #FuncionCompuesta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!FuncionCompuesta methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 18:48'!evaluarEn: x	"Evalúa la función en el valor pasado" ^(parametro1 evaluarEn: (parametro2 evaluarEn: x)).! !FuncionContinua subclass: #FuncionDeUnParametro	instanceVariableNames: 'parametro'	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!FuncionDeUnParametro methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/21/2010 03:27'!parametro: a	"Guarda en el objeto, el valor pasado"	parametro := a.! !FuncionDeUnParametro subclass: #Arcocoseno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Arcocoseno methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 18:34'!evaluarEn: x	"Evalúa la función en el valor pasado"		( (x < -1) | (x > 1) ) ifTrue: [ArgumentoError new signal.].		^((parametro evaluarEn:x) arcCos).! !FuncionDeUnParametro subclass: #Arcoseno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Arcoseno methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 18:33'!evaluarEn: x	"Evalúa la función en el valor pasado"		( (x < -1) | (x > 1) ) ifTrue: [ArgumentoError new signal.].		^((parametro evaluarEn:x) arcSin).! !FuncionDeUnParametro subclass: #Coseno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Coseno methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 17:57'!evaluarEn: x	"Evalúa la función en el valor pasado"	^((parametro evaluarEn:x) cos).! !Funcion subclass: #FuncionDiscreta	instanceVariableNames: 'parametro'	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!FuncionDiscreta methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 5/5/2010 00:51'!parametro: a	"Guarda en el objeto, el valor pasado"	parametro := a.! !FuncionDiscreta subclass: #Factorial	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Factorial methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/20/2010 01:28'!evaluarEn: x	"Evalúa la función en el valor pasado"	|valor|			valor := parametro evaluarEn:x.		( (valor < 0) or: [valor isFloat] ) ifTrue: [ArgumentoError new signal.].		(valor = 0) ifTrue:[^1].	^(valor * (self evaluarEn: (valor-1))).! !FuncionDiscreta subclass: #Fibonacci	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Fibonacci methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/20/2010 01:25'!evaluarEn: x	"Evalúa la función en el valor pasado"	|valor|			valor := parametro evaluarEn:x.		( (valor < 0) or: [valor isFloat] ) ifTrue: [ArgumentoError new signal.].		(valor = 0) ifTrue:[^0].	(valor = 1) ifTrue:[^1].	^((self evaluarEn: (valor-1)) + (self evaluarEn: (valor-2))).! !FuncionDeDosParametros subclass: #Logaritmo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Logaritmo methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/20/2010 03:04'!evaluarEn: x	"Evalúa la función en el valor pasado"		| base argumento |	argumento := parametro2 evaluarEn:x.	base := parametro1 evaluarEn:x.		(argumento<=0) ifTrue: [ArgumentoError new signal].	((base <=0) or: [base = 1]) ifTrue: [ArgumentoError new signal.].	^( argumento log:base ).! !FuncionDeDosParametros subclass: #Potencia	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Potencia methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/21/2010 02:04'!evaluarEn: x	"Evalúa la función en el valor pasado"	(((parametro1 evaluarEn:x) = 0) and: [(parametro2 evaluarEn:x) = 0])		ifTrue: [ArgumentoError new signal].	^((parametro1 evaluarEn:x) raisedTo: (parametro2 evaluarEn:x)).! !Error subclass: #PrecisionError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!FuncionDeDosParametros subclass: #Producto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Producto methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 17:43'!evaluarEn: x	"Evalúa la función en el valor pasado"	^((parametro1 evaluarEn:x) * (parametro2 evaluarEn:x)).! !Error subclass: #RangoError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!FuncionDeDosParametros subclass: #Resta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Resta methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 17:38'!evaluarEn: x	"Evalúa la función en el valor pasado"	^((parametro1 evaluarEn:x) - (parametro2 evaluarEn:x)).! !FuncionDeUnParametro subclass: #Seno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Seno methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 17:52'!evaluarEn: x	"Evalúa la función en el valor pasado"	^((parametro evaluarEn:x) sin).! !FuncionDeDosParametros subclass: #Suma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Suma methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 17:40'!evaluarEn: x	"Evalúa la función en el valor pasado"	^((parametro1 evaluarEn:x) + (parametro2 evaluarEn:x)).! !FuncionDeUnParametro subclass: #Tangente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!Tangente methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/21/2010 02:04'!evaluarEn: x	"Evalúa la función en el valor pasado"	((x)cos = 0) ifTrue: [ArgumentoError new signal.].	^((parametro evaluarEn:x) tan).! !FuncionContinua subclass: #X	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP186052'!!X methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 4/19/2010 17:56'!evaluarEn:x	"Evalúa la función en el valor pasado"	^x.! !