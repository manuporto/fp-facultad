TestCase subclass: #PruebaIntegracion	instanceVariableNames: 'miTablero jugadorBlanco jugadorNegro unAlfilBlanco unAlfilNegro unCaballoBlanco unCaballoNegro unaTorreBlanca unaTorreNegra blanco negro otroAlfilNegro otraTorreNegra otroCaballoNegro otroAlfilBlanco otroCaballoBlanco otraTorreBlanca juego administrador'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!PruebaIntegracion methodsFor: 'Enunciado' stamp: 'MarianoRibotta 10/12/2010 17:44'!testIntegracion1	"Por la implementación, el tablero no sabe si una pieza fue usada, por lo tanto, este test se modificó levemente"	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 1@3.		self should: [juego colocar: unAlfilBlanco en: 2@2] raise: PiezaUsada.! !!PruebaIntegracion methodsFor: 'Enunciado' stamp: 'MarianoRibotta 9/24/2010 16:44'!testIntegracion2	miTablero colocar: unAlfilBlanco en: 1@2.	miTablero colocar: unAlfilNegro en: 1@3.	self should: [jugadorBlanco mover: 2@2 a: 3@1 ] raise: MovimientoNoValido. 'porque aún no se colocaron las tres piezas'! !!PruebaIntegracion methodsFor: 'Enunciado' stamp: 'MarianoRibotta 10/12/2010 17:43'!testIntegracion3	jugadorBlanco colocar: unAlfilBlanco en: 1@2.	jugadorNegro colocar: unAlfilNegro en: 3@1.	jugadorBlanco colocar: unaTorreBlanca en: 2@2.	jugadorNegro colocar: unaTorreNegra en: 2@3.	self should: [jugadorNegro colocar: unCaballoNegro en: 3@2] raise: TurnoNoCorrespondiente. 'El turno no le corresponde a las negras'.	jugadorBlanco colocar: unCaballoBlanco en: 1@1.	self should: [jugadorNegro colocar: unaTorreNegra en: 1@3] raise: PiezaUsada. 'La pieza ya fue usada'.	jugadorNegro colocar: unCaballoNegro en: 3@2.		self assert: (juego partidaTerminada = false). 'no hay tres piezas en linea'.	self should: [jugadorBlanco mover: 1@1 a: 1@3] raise: MovimientoNoValido. 'no respeta movimiento del caballo'.	self should: [jugadorBlanco mover: 1@2 a: 3@4] raise: MovimientoNoValido. 'mueve afuera del tablero'.	self should: [jugadorBlanco mover: 2@3 a: 3@3] raise: PiezaNoValida. 'no puede mover una pieza del adversario'.	self should: [jugadorBlanco mover: 2@3 a: 2@1] raise: PiezaNoValida. 'no puede mover una pieza del adversario'.	self should: [jugadorNegro mover: 3@2 a: 1@3] raise: TurnoNoCorrespondiente. 'El turno no le corresponde a las blancas'.	jugadorBlanco mover: 2@2 a: 2@1.	jugadorNegro mover: 2@3 a: 3@3.	self assert: (juego partidaTerminada = true). 'las tres piezas negras están en linea'! !!PruebaIntegracion methodsFor: 'setUp' stamp: 'MarianoRibotta 10/12/2010 18:13'!blanco := Blanco new.	negro := Negro new.	miTablero := Tablero new.	miTablero crear: 3.	juego := Juego new.	jugadorBlanco := JugadorBlanco new.	jugadorBlanco crear: juego.	jugadorNegro := JugadorNegro new.	jugadorNegro crear: juego.		unCaballoBlanco := jugadorBlanco crearCaballo.	unAlfilBlanco := jugadorBlanco crearAlfil.	unaTorreBlanca := jugadorBlanco crearTorre.	unCaballoNegro := jugadorNegro crearCaballo.	unAlfilNegro := jugadorNegro crearAlfil.	unaTorreNegra := jugadorNegro crearTorre.! !!PruebaIntegracion methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 17:21'!testIntegracion4	jugadorBlanco colocar: unCaballoBlanco en: 2@2.	jugadorNegro colocar: unCaballoNegro en: 3@1."	self should: [administrador crearCaballoBlanco] raise: PiezaUsada."	jugadorBlanco colocar: unaTorreBlanca en: 1@2.	self should: [jugadorBlanco colocar: unAlfilBlanco en: 3@2] raise: TurnoNoCorrespondiente. "No le toca al blanco"	jugadorNegro colocar: unaTorreNegra en: 1@1.	jugadorBlanco colocar: unAlfilBlanco en: 1@3.	jugadorNegro colocar: unAlfilNegro en: 3@2.	self should: [jugadorBlanco colocar: unAlfilBlanco en: 3@2] raise: MovimientoNoValido. "Ya están todas las piezas agregadas"	self should: [jugadorBlanco mover: 1@2 a: 2@2] raise: NoHayMovimientosPosibles.	self shouldnt: [jugadorNegro mover: 1@1 a: 2@1] raise: MovimientoNoValido. "Como se cambió el turno, esto no debe dar error"		jugadorBlanco mover: 1@2 a: 1@1.	jugadorNegro mover: 3@1 a: 1@2.		self deny: juego partidaTerminada. "Aún no hay tres piezas del mismo jugador en linea".		jugadorBlanco mover: 1@3 a: 3@1.	jugadorNegro mover: 2@1 a: 2@3.		self deny: juego partidaTerminada. "Aún no hay tres piezas del mismo jugador en linea".	jugadorBlanco mover: 1@1 a: 1@3.	self assert: juego partidaTerminada. "La diagonal secundaria tiene todas fichas blancas."! !TestCase subclass: #TestAdministradorDePiezas	instanceVariableNames: 'administrador'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestAdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 19:45'!new.! !!TestAdministradorDePiezas methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 19:49'!crearAlfilBlanco.	self should: [administrador crearAlfilBlanco] raise: PiezaUsada.	administrador crearTorreNegra.	self should: [administrador crearAlfilBlanco] raise: PiezaUsada.	self should: [administrador crearTorreNegra] raise: PiezaUsada.! !TestCase subclass: #TestJuego	instanceVariableNames: 'jugadorBlanco jugadorNegro unAlfilBlanco unAlfilNegro unCaballoBlanco unCaballoNegro unaTorreBlanca unaTorreNegra otroAlfilNegro otraTorreNegra otroCaballoNegro otroAlfilBlanco otroCaballoBlanco otraTorreBlanca blanco negro juego'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestJuego methodsFor: 'Colocar:En:' stamp: 'MarianoRibotta 10/7/2010 17:58'!testColocarCuandoNoEsSuTurno	"Prueba colocar una pieza cuando no es su turno"	self should: [ juego colocar: unCaballoNegro en: 1 @ 1 ] raise: TurnoNoCorrespondiente.	juego colocar: unAlfilBlanco en: 1 @ 2.	self should: [ juego colocar: unaTorreBlanca en: 2 @ 3 ] raise: TurnoNoCorrespondiente! !!TestJuego methodsFor: 'Colocar:En:' stamp: 'MarianoRibotta 10/12/2010 17:55'!testColocarDosVecesLaMismaPieza	"Prueba colocar una pieza que ya fue utilizada"	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unaTorreNegra en: 3@1.	self should: [juego colocar: unAlfilBlanco en: 2@3] raise: PiezaUsada.	juego colocar: unaTorreBlanca en: 1@3.	self should: [juego colocar: unaTorreNegra en: 3@2] raise: PiezaUsada.! !!TestJuego methodsFor: 'Colocar:En:' stamp: 'MarianoRibotta 10/7/2010 17:58'!testColocarSobreOtraPieza	"Prueba colocar una pieza donde ya hay una"	juego colocar: unAlfilBlanco en: 1@2.	self should: [juego colocar: unCaballoNegro en: 1@2] raise: MovimientoNoValido.	juego colocar: unCaballoNegro en: 2@2.	self should: [juego colocar: unCaballoBlanco en: 1@2] raise: MovimientoNoValido.	self should: [juego colocar: unCaballoBlanco en: 2@2] raise: MovimientoNoValido.! !!TestJuego methodsFor: 'Mover:A:De:' stamp: 'MarianoRibotta 10/7/2010 17:59'!testIntentarMoverSiNoHayMovimientos	"Prueba que al intentar mover una pieza, si no hay movimientos posibles, lo avisa con una excepción y cambia el turno"		juego colocar: unCaballoBlanco en: 2@2.	juego colocar: unCaballoNegro en: 3@1.	juego colocar: unaTorreBlanca en: 1@2.	juego colocar: unaTorreNegra en: 1@1.	juego colocar: unAlfilBlanco en: 1@3.	juego colocar: unAlfilNegro en: 3@2.	self should: [juego mover: 1@2 a: 2@2 de: blanco] raise: NoHayMovimientosPosibles.	self shouldnt: [juego mover: 1@1 a: 2@1 de: negro] raise: TurnoNoCorrespondiente.! !!TestJuego methodsFor: 'Mover:A:De:' stamp: 'MarianoRibotta 10/7/2010 17:59'!testMoverAntesDeUbicarTodasLasPiezas	"Prueba mover una pieza antes de que se hayan colocado todas"	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unCaballoNegro en: 2@3.	juego colocar: unaTorreBlanca en: 1@1.	self should: [juego mover: 1@2 a: 2@1 de: blanco ] raise: MovimientoNoValido.	juego colocar: unAlfilNegro en: 3@3.	juego colocar: unCaballoBlanco en: 1@3.	self should: [juego mover: 3@3 a: 2@2 de: negro ] raise: MovimientoNoValido.! !!TestJuego methodsFor: 'Mover:A:De:' stamp: 'MarianoRibotta 10/7/2010 17:59'!testMoverCuandoNoEsSuTurno	"Prueba mover una pieza antes de que se hayan colocado todas"	juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	juego mover: 2@2 a: 2@1 de: blanco.	self should: [juego mover: 2@1 a: 2@2 de: blanco ] raise: TurnoNoCorrespondiente.! !!TestJuego methodsFor: 'Mover:A:De:' stamp: 'MarianoRibotta 10/7/2010 17:59'!testMoverDeUnLugarVacio	"Prueba mover una pieza de una posición donde no hay nada"	juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self should: [juego mover: 2@1 a: 2@2 de: blanco ] raise: MovimientoNoValido.! !!TestJuego methodsFor: 'Mover:A:De:' stamp: 'MarianoRibotta 10/7/2010 18:00'!testMoverPiezaDeManeraIncorrecta	"Prueba mover una pieza sin respetar su movimiento"	juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self should: [juego mover: 1@1 a: 1@3 de: blanco ] raise: MovimientoNoValido. "Caballo"	self should: [juego mover: 2@2 a: 1@3 de: blanco ] raise: MovimientoNoValido. "Torre"	self should: [juego mover: 1@2 a: 1@3 de: blanco ] raise: MovimientoNoValido. "Alfil"! !!TestJuego methodsFor: 'Mover:A:De:' stamp: 'MarianoRibotta 10/7/2010 18:00'!testMoverPiezaDelRival	"Prueba mover una pieza del otro jugador"	juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self should: [juego mover: 3@1 a: 1@3 de: blanco ] raise: PiezaNoValida.! !!TestJuego methodsFor: 'PartidaTerminada' stamp: 'MarianoRibotta 10/7/2010 18:00'!testPartidaNoTerminada	"Prueba para ver si correctamente marca como no terminada una partida"	juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self deny: juego partidaTerminada! !!TestJuego methodsFor: 'PartidaTerminada' stamp: 'MarianoRibotta 10/7/2010 18:00'!testPartidaTerminadaPorColumna	"Prueba para ver si correctamente marca como terminada una partida cuando las piezas están colocadas en la misma columna"		juego colocar: unCaballoBlanco en: 3@2.	juego colocar: unCaballoNegro en: 1@1.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self assert: juego partidaTerminada! !!TestJuego methodsFor: 'PartidaTerminada' stamp: 'MarianoRibotta 10/7/2010 18:01'!testPartidaTerminadaPorDiagonalPrincipal	"Prueba para ver si correctamente marca como terminada una partida cuando las piezas están colocadas en la diagonal principal"		juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 2@3.	juego colocar: unAlfilBlanco en: 3@3.	juego colocar: unAlfilNegro en: 3@1.	self assert: juego partidaTerminada! !!TestJuego methodsFor: 'PartidaTerminada' stamp: 'MarianoRibotta 10/7/2010 18:01'!testPartidaTerminadaPorDiagonalSecundaria	"Prueba para ver si correctamente marca como terminada una partida cuando las piezas están colocadas en la diagonal secundaria"		juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 2@2.	juego colocar: unaTorreBlanca en: 3@2.	juego colocar: unaTorreNegra en: 1@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self assert: juego partidaTerminada! !!TestJuego methodsFor: 'PartidaTerminada' stamp: 'MarianoRibotta 10/7/2010 18:01'!testPartidaTerminadaPorFila	"Prueba para ver si correctamente marca como terminada una partida cuando las piezas están colocadas en la misma fila"	juego colocar: unCaballoBlanco en: 1@1.	juego colocar: unCaballoNegro en: 3@2.	juego colocar: unaTorreBlanca en: 2@2.	juego colocar: unaTorreNegra en: 3@3.	juego colocar: unAlfilBlanco en: 1@2.	juego colocar: unAlfilNegro en: 3@1.	self assert: juego partidaTerminada! !!TestJuego methodsFor: 'setUp' stamp: 'MarianoRibotta 10/12/2010 18:15'!juego := Juego new.		blanco := Blanco new.	negro := Negro new.		jugadorBlanco := JugadorBlanco new.	jugadorBlanco crear: juego.		jugadorNegro := JugadorNegro new.	jugadorNegro crear: juego.		unCaballoBlanco := jugadorBlanco crearCaballo.	unAlfilBlanco := jugadorBlanco crearAlfil.	unaTorreBlanca := jugadorBlanco crearTorre.	unCaballoNegro := jugadorNegro crearCaballo.	unAlfilNegro := jugadorNegro crearAlfil.	unaTorreNegra := jugadorNegro crearTorre.! !TestCase subclass: #TestJugador	instanceVariableNames: 'miTablero jugadorBlanco jugadorNegro unAlfilBlanco unAlfilNegro unCaballoBlanco unCaballoNegro unaTorreBlanca unaTorreNegra otroAlfilNegro otraTorreNegra otroCaballoNegro otroAlfilBlanco otroCaballoBlanco otraTorreBlanca blanco negro juego'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestJugador methodsFor: 'setUp' stamp: 'MarianoRibotta 10/12/2010 19:42'!o new.	negro := Negro new.		jugadorBlanco := JugadorBlanco new.	jugadorBlanco crear: juego.		jugadorNegro := JugadorNegro new.	jugadorNegro crear: juego.		unCaballoBlanco := jugadorBlanco crearCaballo.	unAlfilBlanco := jugadorBlanco crearAlfil.	unaTorreBlanca := jugadorBlanco crearTorre.	unCaballoNegro := jugadorNegro crearCaballo.	unAlfilNegro := jugadorNegro crearAlfil.	unaTorreNegra := jugadorNegro crearTorre.! !!TestJugador methodsFor: 'Colocar:En:' stamp: 'MarianoRibotta 9/25/2010 15:49'!testColocarUnaPiezaDelOtroJugador	self should: [ jugadorBlanco colocar: unAlfilNegro en: 1@1. ] raise: ColorIncorrecto.! !TestCase subclass: #TestPieza	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestPieza methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 14:29'!testCrear	"Prueba que tras crear una pieza, su color se guarda"	| unAlfil blanco |		blanco := Blanco new.	unAlfil := Alfil new.	unAlfil crear: blanco.		self assert: (unAlfil getColor == blanco).! !TestCase subclass: #TestPiezaAlfil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestPiezaAlfil methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/25/2010 19:57'!testMovimientoCorrecto	"Prueba que hacer un movimiento correcto con el alfil no devuelva un error"	| unAlfil negro |		negro := Negro new.		unAlfil := Alfil new.	unAlfil crear: negro.	self assert: (unAlfil posibilidadDeMover: 1@1 a: 3@3).	self assert: (unAlfil posibilidadDeMover: 2@2 a: 3@1).	self assert: (unAlfil posibilidadDeMover: 3@2 a: 2@1).! !!TestPiezaAlfil methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/25/2010 19:58'!testMovimientoIncorrecto	"Prueba que hacer un movimiento correcto con el alfil no devuelva un error"	| unAlfil negro |		negro := Negro new.		unAlfil := Alfil new.	unAlfil crear: negro.	self deny: (unAlfil posibilidadDeMover: 1@2 a: 3@1).	self deny: (unAlfil posibilidadDeMover: 3@1 a: 2@1).	self deny: (unAlfil posibilidadDeMover: 3@2 a: 3@3).! !TestCase subclass: #TestPiezaCaballo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestPiezaCaballo methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/25/2010 19:57'!testMovimientoCorrecto	"Prueba que hacer un movimiento correcto con el caballo no devuelva un error"	| unCaballo blanco |		blanco := Blanco new.		unCaballo := Caballo new.	unCaballo crear: blanco.	self assert: (unCaballo posibilidadDeMover: 1@1 a: 2@3).	self assert: (unCaballo posibilidadDeMover: 2@3 a: 3@1).	self assert: (unCaballo posibilidadDeMover: 3@1 a: 1@2).! !!TestPiezaCaballo methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/25/2010 20:02'!testMovimientoIncorrecto	"Prueba que hacer un movimiento incorrecto con el caballo devuelva un error"	| unCaballo blanco |		blanco := Blanco new.		unCaballo := Caballo new.	unCaballo crear: blanco.	self deny: (unCaballo posibilidadDeMover: 1@1 a: 2@2).	self deny: (unCaballo posibilidadDeMover: 3@2 a: 2@3).	"En un tablero de 3x3, un caballo ubicado en 2@2 no se puede mover"	1 to: 3 do: [: i |		1 to: 3 do:[: j |			(i = j) ifFalse: [				self deny: (unCaballo posibilidadDeMover: 2@2 a: i@j)			]		].	]! !TestCase subclass: #TestPiezaTorre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestPiezaTorre methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/26/2010 12:21'!testMovimientoCorrecto	"Prueba que hacer un movimiento correcto con la torre no devuelva un error"	| unaTorre negro |		negro := Negro new.		unaTorre := Torre new.	unaTorre crear: negro.	self assert: (unaTorre posibilidadDeMover: 1@1 a: 1@3).	self assert: (unaTorre posibilidadDeMover: 2@3 a: 2@1).	self assert: (unaTorre posibilidadDeMover: 3@1 a: 1@1).! !!TestPiezaTorre methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 9/26/2010 12:21'!testMovimientoIncorrecto	"Prueba que hacer un movimiento incorrecto con la torre devuelva un error"	| unaTorre negro |		negro := Negro new.		unaTorre := Torre new.	unaTorre crear: negro.	self deny: (unaTorre posibilidadDeMover: 1@2 a: 3@3).	self deny: (unaTorre posibilidadDeMover: 2@3 a: 3@2).	self deny: (unaTorre posibilidadDeMover: 3@1 a: 1@2).! !TestCase subclass: #TestTablero	instanceVariableNames: 'miTablero jugadorBlanco jugadorNegro unAlfilBlanco unAlfilNegro unCaballoBlanco unCaballoNegro unaTorreBlanca unaTorreNegra otroAlfilNegro otraTorreNegra otroCaballoNegro otroAlfilBlanco otroCaballoBlanco otraTorreBlanca blanco negro juego'	classVariableNames: ''	poolDictionaries: ''	category: '2010-2C-3-TP1-86052-Tests'!!TestTablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/12/2010 19:43'!lero new.	miTablero crear: 3.		blanco := Blanco new.	negro := Negro new.		jugadorBlanco := JugadorBlanco new.	jugadorBlanco crear: juego.		jugadorNegro := JugadorNegro new.	jugadorNegro crear: juego.		unCaballoBlanco := jugadorBlanco crearCaballo.	unAlfilBlanco := jugadorBlanco crearAlfil.	unaTorreBlanca := jugadorBlanco crearTorre.	unCaballoNegro := jugadorNegro crearCaballo.	unAlfilNegro := jugadorNegro crearAlfil.	unaTorreNegra := jugadorNegro crearTorre.! !!TestTablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 17:52'!testColocarFueraDelTablero	"Prueba colocar una pieza fuera del tablero, tanto por fila como por columna"	self should: [miTablero colocar: unAlfilBlanco en: 7@1] raise: MovimientoNoValido.	self should: [miTablero colocar: unAlfilBlanco en: 1@4] raise: MovimientoNoValido.	self should: [miTablero colocar: unAlfilBlanco en: 11@41] raise: MovimientoNoValido.! !!TestTablero methodsFor: 'as yet unclassified' stamp: 'MarianoRibotta 10/7/2010 17:55'!testMoverFueraDelTablero	"Prueba mover una pieza fuera de los límites del tablero"	miTablero colocar: unCaballoBlanco en: 1@1.	miTablero colocar: unCaballoNegro en: 3@2.	miTablero colocar: unaTorreBlanca en: 2@2.	miTablero colocar: unaTorreNegra en: 2@3.	miTablero colocar: unAlfilBlanco en: 1@2.	miTablero colocar: unAlfilNegro en: 3@1.	self should: [miTablero moverDe: 2@2 a: 2@7] raise: MovimientoNoValido.! !