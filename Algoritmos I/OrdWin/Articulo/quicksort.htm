<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html lang="es">
<head>
<title>4 Ordenamiento Rápido (Quicksort)</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="alg_ord.css" media="screen" type="text/css">
</head>

<body>
 <h1>4 Ordenamiento Rápido (Quicksort)</h1>

 <div>
  <p class="barra">
    [<a title="Anterior: Ordenamiento por Inserción"
        href="insercion.htm">3 Inserción</a>]   
    [<a title="Volver a la Página Principal de Algoritmos"
        href="alg_ord.htm">Volver a Algoritmos</a>]
  </p>
 </div>

 <!-- Descripción -->
 <a id="descripcion"></a>
 <h2>1. Descripción.</h2>
 <p>Esta es probablemente la técnica más rápida conocida. Fue desarrollada por C.A.R.
   Hoare en 1960. El algoritmo original es recursivo, pero se utilizan versiones
   iterativas para mejorar su rendimiento (los algoritmos recursivos son en general más
   lentos que los iterativos, y consumen más recursos). El algoritmo fundamental es el
   siguiente:
 </p>
 <ul>
  <li>Eliges un elemento de la lista. Puede ser cualquiera (en <a href="#optimizando">
    Optimizando</a> veremos una forma más efectiva). Lo llamaremos <strong>elemento de 
    división</strong>.
  </li>
  <li>Buscas la posición que le corresponde en la lista ordenada (explicado más abajo).
  </li>
  <li>Acomodas los elementos de la lista a cada lado del elemento de división, de manera
    que a un lado queden todos los menores que él y al otro los mayores (explicado más
    abajo también). En este momento el elemento de división separa la lista en dos
    sublistas (de ahí su nombre).
  </li>
  <li>Realizas esto de forma recursiva para cada sublista mientras éstas tengan un largo
    mayor que 1. Una vez terminado este proceso todos los elementos estarán ordenados.
  </li>
 </ul>
 <p> Una idea preliminar para ubicar el elemento de división en su posición final sería
   contar la cantidad de elementos menores y colocarlo un lugar más arriba. Pero luego
   habría que mover todos estos elementos a la izquierda del elemento, para que se cumpla
   la condición y pueda aplicarse la recursividad. Reflexionando un poco más se obtiene un
   procedimiento mucho más efectivo. Se utilizan dos índices: i, al que llamaremos
   contador por la izquierda, y j, al que llamaremos contador por la derecha. El algoritmo
   es éste:
 </p>
 <ul>
  <li>Recorres la lista simultáneamente con i y j: por la izquierda con i (desde el primer
    elemento), y por la derecha con j (desde el último elemento).
  </li>
  <li>Cuando lista[i] sea mayor que el elemento de división y lista[j] sea menor los
    intercambias.
  </li>
  <li>Repites esto hasta que se crucen los índices.
  </li> 
  <li>El punto en que se cruzan los índices es la posición adecuada para colocar el
    elemento de división, porque sabemos que a un lado los elementos son todos menores y
    al otro son todos mayores (o habrían sido intercambiados). 
  </li> 
 </ul>
 <p>Al finalizar este procedimiento el elemento de división queda en una posición en que
   todos los elementos a su izquierda son menores que él, y los que están a su derecha son
   mayores.
 </p>

 <!-- Pseudocódigo en C -->
 <a id="pseudocodigo"></a>
 <h2>2. Pseudocódigo en C.</h2>

 <!-- Tabla de variables -->
 <table border=1 align=center
  summary="Tabla de Variables: Nombre, tipo y uso de cada varaiable en el algoritmo">
  <caption>Tabla de variables</caption>
  <thead>
   <tr>
    <th>Nombre</th>
    <th>Tipo</th>
    <th>Uso</th>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td>lista</td>
    <td>Cualquiera</td>
    <td>Lista a ordenar</td>
   </tr>
   <tr>
    <td>inf</td>
    <td>Entero</td>
    <td>Elemento inferior de la lista</td>
   </tr>
   <tr>
    <td>sup</td>
    <td>Entero</td>
    <td>Elemento superior de la lista</td>
   </tr>
   <tr>
    <td>elem_div</td>
    <td>El mismo que los elementos de la lista</td>
    <td>El elemento divisor</td>
   </tr>
   <tr>
    <td>temp</td>
    <td>El mismo que los elementos de la lista</td>
    <td>Para realizar los intercambios</td>
   </tr>
   <tr>
    <td>i</td>
    <td>Entero</td>
    <td>Contador por la izquierda</td>
   </tr>
   <tr>
    <td>j</td>
    <td>Entero</td>
    <td>Contador por la derecha</td>
   </tr>
   <tr>
    <td>cont</td>
    <td>Entero</td>
    <td>El ciclo continua mientras cont tenga el valor 1</td>
   </tr>    
  </tbody>
 </table>
 <!-- Listado -->
 <pre class="pseudo"> 
 Nombre Procedimiento: OrdRap
 Parámetros: 
    lista a ordenar (lista) 
    índice inferior (inf) 
    índice superior (sup)
                   
    // Inicialización de variables
    1. elem_div = lista[sup];
    2. i = inf - 1;
    3. j = sup;
    4. cont = 1;
    
    // Verificamos que no se crucen los límites
    5. if (inf >= sup)
    6.      retornar;
    
    //  Clasificamos la sublista
    7. while (cont)
    8.      while (lista[++i] &lt; elem_div);
    9.      while (lista[--j] > elem_div);
   10.      if (i &lt; j)
   11.           temp = lista[i];
   12.           lista[i] = lista[j];
   13.           lista[j] = temp;
   14.      else
   15.           cont = 0;
   
   // Copiamos el elemento de división
   // en su posición final
   16. temp = lista[i];
   17. lista[i] = lista[sup];
   18. lista[sup] = temp;
   
   // Aplicamos el procedimiento
   // recursivamente a cada sublista
   19. OrdRap (lista, inf, i - 1);
   20. OrdRap (lista, i + 1, sup);
 </pre>
 <p class="nota">Nota:
 </p>
 <ul>
  <li>La primera llamada debería ser con la lista, cero (0) y el tamaño de la lista menos
    1 como parámetros.
  </li>
 </ul> 

 <!-- Ejemplo de ejecución del algoritmo -->
 <a id="ejemplo"></a>            
 <h2>3. Un ejemplo</h2>
 <p>Esta vez voy a cambiar de lista ;-D
 </p>
 <p class="ejemp">5 - 3 - 7 - 6 - 2 - 1 - 4
 </p>
 <p>Comenzamos con la lista completa. El elemento divisor será el 4:
 </p>
 <p class="ejemp">5 - 3 - 7 - 6 - 2 - 1 - <b class="div">4</b>
 </p>
 <p>Comparamos con el 5 por la izquierda y el 1 por la derecha.
 </p>
 <p class="ejemp"><b>5</b> - 3 - 7 - 6 - 2 - <b>1</b> - <b class="div">4</b>
 </p>
 <p>5 es mayor que cuatro y 1 es menor. Intercambiamos:
 </p>
 <p class="ejemp"><b>1</b> - 3 - 7 - 6 - 2 - <b>5</b> - <b class="div">4</b>
 </p>
 <p>Avanzamos por la izquierda y la derecha:
 </p>
 <p class="ejemp">1 - <b>3</b> - 7 - 6 - <b>2</b> - 5 - <b class="div">4</b>
 </p>
 <p>3 es menor que 4: avanzamos por la izquierda. 2 es menor que 4: nos mantenemos ahí.
 </p>
 <p class="ejemp">1 - 3 - <b>7</b> - 6 - <b>2</b> - 5 - <b class="div">4</b>
 </p>
 <p>7 es mayor que 4 y 2 es menor: intercambiamos.
 </p>
 <p class="ejemp">1 - 3 - <b>2</b> - 6 - <b>7</b> - 5 - <b class="div">4</b>
 </p>
 <p>Avanzamos por ambos lados:
 </p>
 <p class="ejemp">1 - 3 - 2 - <b>6</b> - 7 - 5 - <b class="div">4</b>
 </p>
 <p>En este momento termina el ciclo principal, porque los índices se cruzaron. Ahora
   intercambiamos lista[i] con lista[sup] (pasos 16-18):
 </p>
 <p class="ejemp">1 - 3 - 2 - <b class="div">4</b> - 7 - 5 - <b>6</b>
 </p>
 <p>Aplicamos recursivamente a la sublista de la izquierda (índices 0 - 2). Tenemos lo
   siguiente:  
 </p>
 <p class="ejemp"><b>1</b> - <b>3</b> - <b class="div">2</b>
 </p>
 <p>1 es menor que 2: avanzamos por la izquierda. 3 es mayor: avanzamos por la derecha.
   Como se intercambiaron los índices termina el ciclo. Se intercambia lista[i] con
   lista[sup]:
 </p> 
 <p class="ejemp">1 - <b class="div">2</b> - <b>3</b>
 </p>
 <p>Al llamar recursivamente para cada nueva sublista (lista[0]-lista[0] y
   lista[2]-lista[2]) se retorna sin hacer cambios (condición 5.).Para resumir te muestro
   cómo va quedando la lista:
 </p>
 <p>Segunda sublista: lista[4]-lista[6]
 </p>
 <p class="ejemp"><b>7</b> - <b>5</b> - <b class="div">6</b>
 </p>
 <p class="ejemp"><b>5</b> - <b>7</b> - <b class="div">6</b>
 </p>
 <p class="ejemp">5 - <b class="div">6</b> - <b>7</b>
 </p>
 <p>Para cada nueva sublista se retorna sin hacer cambios (se cruzan los índices).
 </p>
 <p>Finalmente, al retornar de la primera llamada se tiene el arreglo ordenado:
 </p>
 <p class="ejemp">1 - 2 - 3 - 4 - 5 - 6 - 7
 </p>
 <p>Eso es todo. Bastante largo ¿verdad?
 </p>  

 <!-- Optimizaciones -->
 <a id="optimizando"></a>
 <h2>4. Optimizando.</h2>
 <p>Sólo voy a mencionar algunas optimizaciones que pueden mejorar bastante el rendimiento
   de quicksort:
 </p>
 <ul>
  <li>Hacer una versión iterativa: Para ello se utiliza una pila en que se van guardando
    los límites superior e inferior de cada sublista.
  </li>
  <li>No clasificar todas las sublistas: Cuando el largo de las sublistas va disminuyendo,
    el proceso se va <i>encareciendo</i>. Para solucionarlo sólo se clasifican las listas
    que tengan un largo menor que <b>n</b>. Al terminar la clasificación se llama a otro
    algoritmo de ordenamiento que termine la labor. El indicado es uno que se comporte
    bien con listas casi ordenadas, como el ordenamiento por inserción por ejemplo. La
    elección de <b>n</b> depende de varios factores, pero un valor entre 10 y 25 es
    adecuado. 
  </li>
  <li>Elección del elemento de división: Se elige desde un conjunto de tres elementos:
     lista[inferior], lista[mitad] y lista[superior]. El elemento elegido es el que tenga
     el valor medio según el criterio de comparación. Esto evita el comportamiento
     degenerado cuando la lista está prácticamente ordenada.
  </li>
 </ul>

 <!-- Análisis del algoritmo -->
 <a id="analisis"></a>
 <h2>5. Análisis del algoritmo.</h2> 
 <ul>
  <li><a href="alg_ord.htm#estabilidad">Estabilidad</a>: No es <i>estable</i>.
  </li>
  <li><a href="alg_ord.htm#requerimientos">Requerimientos de Memoria</a>: No requiere
    memoria adicional en su forma recursiva. En su forma iterativa la necesita para la
    pila.
  </li>
  <li><a href="alg_ord.htm#tiempo_ejecucion">Tiempo de Ejecución</a>:
   <ul> 
    <li>Caso promedio. La complejidad para dividir una lista de <b>n</b> es O(n). Cada
      sublista genera en promedio dos sublistas más de largo n/2. Por lo tanto la
      complejidad se define en forma recurrente como:    
      <p class="ejemp">f(1) = 1
      </p>
      <p class="ejemp">f(n) = n + 2 f(n/2)
      </p>
      <p>La forma cerrada de esta expresión es:
      </p>
      <p class="ejemp">f(n) = n log<sub>2</sub>n
      </p>
      <p>Es decir, la complejidad es <b>O(n log<sub>2</sub>n)</b>.
      </p>
    </li>
    <li>El peor caso ocurre cuando la lista ya está ordenada, porque cada llamada genera
      sólo una sublista (todos los elementos son menores que el elemento de división). En
      este caso el rendimiento se degrada a O(n<sup>2</sup>). Con las optimizaciones
      mencionadas arriba puede evitarse este comportamiento.
    </li>
  </ul>
 </ul>
 
 <p><b>Ventajas:</b>
 </p>
 <ul>
  <li>Muy rápido
  </li>
  <li>No requiere memoria adicional.
  </li>
 </ul>
 <p><b>Desventajas:</b>
 </p>
 <ul>
  <li>Implementación un poco más complicada.
  </li>
  <li>Recursividad (utiliza muchos recursos).
  </li>
  <li>Mucha diferencia entre el peor y el mejor caso.
  </li>
 </ul>
 <p>La mayoría de los problemas de rendimiento se pueden solucionar con las optimizaciones
   mencionadas arriba (al costo de complicar mucho más la implementación). Este es un
   algoritmo que puedes utilizar en la vida real. Es muy eficiente. En general será la
   mejor opción. Intenta programarlo. Mira el <a href="alg_ord.htm#codigo">código</a>
   si tienes dudas.
 </p>

 <div>
  <p class="barra">
    [<a title="Anterior: Ordenamiento por Inserción"
        href="insercion.htm">3 Inserción</a>]   
    [<a title="Volver a la Página Principal de Algoritmos"
        href="alg_ord.htm">Volver a Algoritmos</a>]
  </p>
 </div>
 
 <hr>
 <p class="copyr">©2001 - <a href="mailto:jhida003@pinhue.ufro.cl">Julián
   Hidalgo</a>
 </p>
</body>
</html>
